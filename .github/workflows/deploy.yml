name: my-app

on:
  push:
    branches:
      - eb-deploy
#  event: [ event1, event2, ... ]
#  push:
#    branches:
#      - main
#      - develop
#  pull_request:
#    branches:
#      - main
#      - develop

jobs: # 병렬
  image-build:
    runs-on: ubuntu-latest # 작업이 실행될 환경을 지정 , 깃헙액션이 제공해주는 도커를 이용
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # -p 비밀번호 또는 엑세스 토큰
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

      - name: Image Build and Push
        run: |
          DOCKER_BUILDKIT=1 docker-compose -f docker-compose-buildForEb.yml build

          docker tag my-app-db ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db:0.0.1
          docker tag my-app-server ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server:0.0.1

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db:0.0.1
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server:0.0.1
          
          

# docker tag my-app-react ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react:0.0.1
# docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react:0.0.1
# docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app-docker .





  deploy-server:
    needs: image-build
    runs-on: ubuntu-latest # 작업이 실행될 환경을 지정 , 깃헙액션이 제공해주는 도커를 이용
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

      #      sudo yum update -y  # 시스템 패키지 최신으로 업데이트
      #      sudo yum install -y docker  # yum 패키지로 도커 설치
      #      sudo service docker start  # 도커 시작
      #      sudo systemctl enable docker  # 부팅 시 도커 자동 시작
      #      sudo usermod -a -G docker ec2-user  # 그룹에 사용자 추가
      #      우분투 환경이므로 yum x, apt 사용
      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            if ! apt list --upgradable 2>/dev/null | grep -q "upgradable"; then
              sudo apt update -y
            fi
            if ! command -v docker &> /dev/null; then
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            else
              echo "Docker is already installed"
            fi
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

      # https://github.com/appleboy/ssh-action#if-you-are-using-openssh 참고해서 ssh 설정
      - name: EC2 docker remove
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: | # 없는걸 삭제하면 에러
            if [ "$(sudo docker ps -aq)" ]; then
              sudo docker stop $(sudo docker ps -aq)
              sudo docker rm $(sudo docker ps -aq)
            fi
            if [ "$(sudo docker images -aq)" ]; then
              sudo docker rmi $(sudo docker images -aq)
            fi

      - name: EC2 docker pull
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db:0.0.1
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server:0.0.1
          # latest 덮어 씀 , 동일한 로컬 이미지 재사용

      - name: Copy file to EC2
        uses: appleboy/scp-action@master # 기존 파일을 덮어씀
        with:
          host: ${{ secrets.HOST2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: ./docker-compose-ec2.yml # 프로젝트 루트
          target: /home/ubuntu/

      - name: EC2 docker-compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST2 }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            echo "HS512_SECRET=${{ secrets.HS512_SECRET }}" > .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME}}" >> .env
            echo "TAG_VERSION=0.0.1" >> .env
            sudo COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose -p my-app -f docker-compose-ec2.yml up -d
          # 환경변수를 더 추가할 때는 >> 로 추가한다.













  # deploy-react:
  #   needs: image-build
  #   runs-on: ubuntu-latest # 작업이 실행될 환경을 지정 , 깃헙액션이 제공해주는 도커를 이용
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: DockerHub Login
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME}}
  #         password: ${{ secrets.DOCKERHUB_TOKEN}}

  #     #      sudo yum update -y  # 시스템 패키지 최신으로 업데이트
  #     #      sudo yum install -y docker  # yum 패키지로 도커 설치
  #     #      sudo service docker start  # 도커 시작
  #     #      sudo systemctl enable docker  # 부팅 시 도커 자동 시작
  #     #      sudo usermod -a -G docker ec2-user  # 그룹에 사용자 추가
  #     #      우분투 환경이므로 yum x, apt 사용
  #     - name: Install Docker on EC2
  #       uses: appleboy/ssh-action@v0.1.6
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.KEY }}
  #         script: |
  #           if ! apt list --upgradable 2>/dev/null | grep -q "upgradable"; then
  #             sudo apt update -y
  #           fi
  #           if ! command -v docker &> /dev/null; then
  #             sudo apt install -y docker.io
  #             sudo systemctl start docker
  #             sudo systemctl enable docker
  #             sudo usermod -aG docker ubuntu
  #           else
  #             echo "Docker is already installed"
  #           fi
  #           if ! command -v docker-compose &> /dev/null; then
  #             sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #             sudo chmod +x /usr/local/bin/docker-compose
  #           fi

  #     # https://github.com/appleboy/ssh-action#if-you-are-using-openssh 참고해서 ssh 설정
  #     - name: EC2 docker remove
  #       uses: appleboy/ssh-action@v0.1.6
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.KEY }}
  #         script: | # 없는걸 삭제하면 에러
  #           if [ "$(sudo docker ps -aq)" ]; then
  #             sudo docker stop $(sudo docker ps -aq)
  #             sudo docker rm $(sudo docker ps -aq)
  #           fi
  #           if [ "$(sudo docker images -aq)" ]; then
  #             sudo docker rmi $(sudo docker images -aq)
  #           fi

  #     - name: EC2 docker pull
  #       uses: appleboy/ssh-action@v0.1.6
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.KEY }}
  #         script: |
  #           sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react:0.0.1

  #     - name: EC2 docker run React
  #       uses: appleboy/ssh-action@v0.1.6
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.KEY }}
  #         script: |
  #           sudo nohup docker run --name my-app-react-1 -p 80:3000 ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react:0.0.1 > /dev/null 2>&1 &
  #         #  -e HS512_SECRET=${{ secrets.HS512_SECRET }} \










  # deploy-to-EB:
  #   needs: image-build
  #   runs-on: ubuntu-latest # 작업이 실행될 환경을 지정 , 깃헙액션이 제공해주는 도커를 이용
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get current time
  #       uses: 1466587594/get-current-time@v2
  #       id: current-time
  #       with:
  #         format: YYYY-MM-DDTHH-mm-ss
  #         utcOffset: "+09:00"

  #     - name: Show Current Time
  #       run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"   # 버전 레이블 다르게

  #     # -r 하위 전부
  #         # cp Dockerrun.aws.json deploy/Dockerrun.aws.json
  #     - name: Generate deployment package
  #       run: |
  #         mkdir -p deploy
  #         cp docker-compose-eb.yml deploy/docker-compose.yml
  #         cp -r .ebextensions deploy/.ebextensions
  #         cd deploy && zip -r deploy.zip .
  #     - name: Deploy to EB
  #       uses: einaregilsson/beanstalk-deploy@v21
  #       with:
  #         aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  #         application_name: prod-todo-server # 엘리스틱 빈스톡 애플리케이션 이름!
  #         environment_name: Prod-todo-server-env # 엘리스틱 빈스톡 환경 이름!
  #         version_label: todo-server-${{steps.current-time.outputs.formattedTime}}
  #         region: ap-northeast-2
  #         deployment_package: deploy/deploy.zip