name: my-app
on:
  push:
    branches:
      - main

jobs: # 병렬
  build:
    runs-on: ubuntu-latest # 작업이 실행될 환경을 지정 , 깃헙액션이 제공해주는 도커를 이용
    steps:
      - name: Checkout
        uses: actions/checkout@v3

#      - name: github.workspace ckeck
#        run: |
#          echo "Source Directory: ${{ github.workspace }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

#      - name: create env file
#        run: |
#          touch .env
#          echo "HS512_SECRET=${{ secrets.HS512_SECRET }}" >> .env
#        shell: bash
#          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env # >> 는 추가 > 는 덮어씀

      # workflow 테스트용
#      - name: Build and push
#        run: sudo sh deploy.sh

        # -p 비밀번호 또는 엑세스 토큰
        #  docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app-docker .

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_PASSWORD}}

      - name: Image Build and Push
        run: |
          DOCKER_BUILDKIT=1 docker-compose -f docker-compose-prod.yml build

          docker tag my-app-db ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db:latest
          docker tag my-app-server ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server:latest
          docker tag my-app-react ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react:latest

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react


#      sudo yum update -y  # 시스템 패키지 최신으로 업데이트
#      sudo yum install -y docker  # yum 패키지로 도커 설치
#      sudo service docker start  # 도커 시작
#      sudo systemctl enable docker  # 부팅 시 도커 자동 시작
#      sudo usermod -a -G docker ec2-user  # 그룹에 사용자 추가
# 우분투 환경이므로 yum x, apt 사용
      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            if ! apt list --upgradable 2>/dev/null | grep -q "upgradable"; then
              sudo apt update -y
            fi
            if ! command -v docker &> /dev/null; then
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            else
              echo "Docker is already installed"
            fi
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
      

      # https://github.com/appleboy/ssh-action#if-you-are-using-openssh 참고해서 ssh 설정
      - name: EC2 docker remove
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: | # 없는걸 삭제하면 에러
            if [ "$(sudo docker ps -aq)" ]; then
              sudo docker stop $(sudo docker ps -aq)
              sudo docker rm $(sudo docker ps -aq)
            fi
            if [ "$(sudo docker images -aq)" ]; then
              sudo docker rmi $(sudo docker images -aq)
            fi

      - name: EC2 docker pull
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-db
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-server
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-app-react
        # latest 덮어 씀 , 동일한 로컬 이미지 재사용

      - name: Copy file to EC2
        uses: appleboy/scp-action@master # 기존 파일을 덮어씀
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: ./docker-compose-prod.yml # 프로젝트 루트
          target: /home/ubuntu/

      - name: EC2 docker-compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          timeout: 900 # 15분
          script: |
            echo "HS512_SECRET=${{ secrets.HS512_SECRET }}" > .env
            sudo COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose -p my-app -f docker-compose-prod.yml up
            

# 환경변수를 넣을때 -e -env 명령어는 docker run에서 유효함 docker-compose에서는 파일을 넣어야 한다.
#            sudo docker run -p 80:3000 \
#            --name my-app-docker \
#            -e HS512_SECRET=${{ secrets.HS512_SECRET }} \
#            -d ${{ secrets.DOCKERHUB_USERNAME }}/my-app-docker # 실행할 도커 이미지 지정
          # --name 만들 컨테이너명

#      - name: create remote directory
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ubuntu
#          key: ${{ secrets.KEY }}
#          script: |
#            sudo mkdir -p /home/ubuntu/srv/ubuntu
#            sudo chown -R ubuntu:ubuntu /home/ubuntu/srv/ubuntu
##            sudo rm -rf /home/ubuntu/srv/ubuntu
#          # sudo로 권한을 변경하면 소유자가 root가 되어버린다. ubuntu로 변경해줘야함
#
#      - name: copy source via ssh key
#        uses: burnett01/rsync-deployments@4.1 # rsync 로컬 전체 복사
#        with:
#          switches: -avzr --delete -a --include=".*" # --delete 원격 서버에 로컬에 없는거 지우기, -a 숨김파일 복사 ( .env )
#          remote_path: /home/ubuntu/srv/ubuntu/  /var/lib/docker
#          remote_host: ${{ secrets.HOST }}
#          remote_user: ubuntu
#          remote_key: ${{ secrets.KEY }}
#
#      - name: executing remote ssh commands using password
#        uses: appleboy/ssh-action@master
#        env:
#          DEPLOY_USERNAME: nobody
#          HS512_SECRET: ${{ secrets.HS512_SECRET }}
#        with:
#          host: ${{ secrets.HOST }}
#          username: ubuntu
#          key: ${{ secrets.KEY }}
#          envs: HS512_SECRET
#          script: |
#            sudo sh /home/ubuntu/srv/ubuntu/deploy.sh


       # -r 옵션은 디렉토리 내의 모든 하위 파일과 디렉토리를 복사하는 데 사용
#      - name: Generate deployment package
#        run: |
#          mkdir -p deploy
#          cp build/libs/*.jar deploy/application.jar
#          cp Procfile deploy/Procfile
#          cp -r .ebextensions deploy/.ebextensions
#          cd deploy && zip -r deploy.zip .
#      - name: Deploy to EB
#        uses: einaregilsson/beanstalk-deploy@v21 # 엘라스틱 빈스톡 환경 사용
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }} # 중괄호 2개는 깃헙 환경변수 접근
#          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
#          application_name: aws-v5-beanstalk # 엘리스틱 빈스톡 애플리케이션 이름!
#          environment_name: Awsv5beanstalk-env # 엘리스틱 빈스톡 환경 이름!
#          version_label: aws-v5-${{steps.current-time.outputs.formattedTime}}
#          region: ap-northeast-2 # 서울 서버로 압축파일을 전달해줌
#          deployment_package: deploy/deploy.zip